version: "3.8"

services:
  app:
    build:
      context: .
    ports:
      - "5000:80"
    env_file:
      - .env
    depends_on:
      db-migrator:
        condition: service_completed_successfully

  builder:
    build:
      context: .
      target: build
      
  unit-tests:
    build:
      context: .
      target: build
    command: dotnet test -c Release tests/Ok.Movies.Tests.Unit/
      --logger trx;LogFilePrefix=/app/tests/test-results/
      /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura
      /p:CoverletOutput='/app/tests/test-results/unit-tests/'
  
  integration-tests:
    build:
      context: .
      target: build
      dockerfile: Dockerfile
    command: dotnet test -c Release tests/Ok.Movies.Tests.Integration/
      --logger trx;LogFilePrefix=/app/tests/test-results/
      /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura
      /p:CoverletOutput='/app/tests/test-results/integration-tests/'
    environment:
      - TESTCONTAINERS_HOST_OVERRIDE=host.docker.internal # Needed in Docker Desktop (Windows), needs to be removed on linux hosts. Can be done with a override compose file.
    container_name: myproject.authentication.api.tests

  #  integration-tests:
  #    build:
  #      context: .
  #      target: build
  #    command: dotnet test -c Release tests/Ok.Movies.Tests.Integration/
  #      --logger trx;LogFilePrefix=/app/tests/test-results/
  #      /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura
  #      /p:CoverletOutput='/app/tests/test-results/integration-tests/'
  
  db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: psql -U postgres -c '\l'
      interval: 1s
      timeout: 10s
      retries: 10
  
  db-migrator:
    build:
      context: .
      target: build
    env_file:
      - .env
    command: /src/Database.Migrations/bin/Release/net7.0/Database.Migrations
    depends_on: 
      db:
        condition: service_healthy

volumes: 
  pgdata:
